Name: ü§ñ Auto SEO + IndexNow + Cloudflare Deploy (Full)

on:
  schedule:
    - cron: "0 */12 * * *"     # ‚è∞ Every 12 hours
  workflow_dispatch:            # Manual trigger allowed

jobs:
  seo:
    runs-on: ubuntu-latest

    steps:
      # ----------------------------------------
      # 1Ô∏è‚É£ Checkout Repo
      # ----------------------------------------
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4

      # ----------------------------------------
      # 2Ô∏è‚É£ Setup Node.js
      # ----------------------------------------
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ----------------------------------------
      # 3Ô∏è‚É£ Install Dependencies
      # ----------------------------------------
      - name: üì¶ Install Dependencies
        run: npm ci

      # ----------------------------------------
      # 4Ô∏è‚É£ Generate indexnow-key.txt if missing
      # ----------------------------------------
      - name: üîë Ensure IndexNow Key
        run: |
          mkdir -p ./public || true
          if [ ! -f indexnow-key.txt ]; then
            echo "‚öôÔ∏è Generating new indexnow-key.txt..."
            KEY=$(openssl rand -hex 16)
            echo "$KEY" > indexnow-key.txt
            echo "‚úÖ New IndexNow key generated: $KEY"
          else
            echo "‚úÖ Existing indexnow-key.txt found"
          fi

      # ----------------------------------------
      # 5Ô∏è‚É£ Generate main sitemap + meta
      # ----------------------------------------
      - name: üåê Generate Main SEO Files
        env:
          # ‚úÖ Secret name matched: GOOGLE_SHEET_API_KEY
          SHEET_KEY: ${{ secrets.GOOGLE_SHEET_API_KEY }} 
        run: |
          echo "üó∫Ô∏è Running generate-sitemap.js..."
          node generate-sitemap.js || echo "‚ö†Ô∏è Skipped main sitemap"

      # ----------------------------------------
      # 6Ô∏è‚É£ Generate actress pages + sitemap
      # ----------------------------------------
      - name: üé¨ Generate Actress Pages + SEO Data
        run: |
          echo "üé• Running generate-actresses.js..."
          node generate-actresses.js || echo "‚ö†Ô∏è Skipped actresses generation"

      # ----------------------------------------
      # 7Ô∏è‚É£ Commit and push SEO updates
      # ----------------------------------------
      - name: üíæ Commit SEO Updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.users.noreply.github.com"

          git add -f sitemap.xml sitemap.xml.gz robots.txt seo-meta.json \
            sitemap-actors.xml seo-meta-actors.json sitemap-index.xml \
            actors/ indexnow-key.txt _headers || true

          if git diff --cached --quiet; then
            echo "‚úÖ No file changes to commit."
          else
            TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            git commit -m "ü§ñ Auto SEO + IndexNow update: ${TIMESTAMP}"
            git push
          fi

      # ----------------------------------------
      # 8Ô∏è‚É£ Trigger Cloudflare Deploy
      # ----------------------------------------
      - name: üöÄ Deploy to Cloudflare Pages
        if: success()
        env:
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_PROJECT_NAME: ${{ secrets.CF_PROJECT_NAME }}
          # ‚úÖ Secret name matched: CLOUDFLARE_API_TOKEN
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }} 
        run: |
          echo "üöÄ Deploying new build to Cloudflare..."
          # CF_API_TOKEN environment variable ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó
          curl -X POST "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/${CF_PROJECT_NAME}/deployments" \
          -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data '{"branch":"main"}' \
          --fail --silent --show-error

      # ----------------------------------------
      # 9Ô∏è‚É£ Purge Cloudflare Cache
      # ----------------------------------------
      - name: üßπ Purge Cloudflare Cache
        if: success()
        env:
          # ‚úÖ Secret name matched: CLOUDFLARE_API_TOKEN
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          # ‚úÖ Secret name matched: CLOUDFLARE_ZONE_ID
          CF_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "üßπ Clearing Cloudflare cache..."
          # CF_API_TOKEN and CF_ZONE_ID environment variables ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/purge_cache" \
          -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data '{"files":["https://dareloom.fun/sitemap.xml","https://dareloom.fun/sitemap-actors.xml","https://dareloom.fun/robots.txt"]}'

      # ----------------------------------------
      # üîü Notify IndexNow + Google + Bing
      # ----------------------------------------
      - name: üîî Notify Search Engines
        if: success()
        run: |
          INDEXNOW_KEY=$(cat indexnow-key.txt | tr -d '\n')
          DOMAIN="https://dareloom.fun"
          echo "üîî Pinging IndexNow, Google & Bing..."

          curl -s -X POST "https://api.indexnow.org/indexnow" \
            -H "Content-Type: application/json" \
            -d "{\"host\": \"dareloom.fun\", \"key\": \"${INDEXNOW_KEY}\", \"urlList\": [\"${DOMAIN}/sitemap.xml\", \"${DOMAIN}/sitemap-actors.xml\"]}"

          curl -s "https://www.google.com/ping?sitemap=${DOMAIN}/sitemap.xml"
          curl -s "https://www.google.com/ping?sitemap=${DOMAIN}/sitemap-actors.xml"
          curl -s "https://www.bing.com/ping?sitemap=${DOMAIN}/sitemap.xml"
          curl -s "https://www.bing.com/ping?sitemap=${DOMAIN}/sitemap-actors.xml"

          echo "‚úÖ Search engines notified successfully!"
          
